Full I/O support for buffers and zip files

Up to now, the support for buffers was limited to text buffers. Now,
byte buffers are also supported, so one can read/write binary files
and CDF files from/to buffers.

This change also introduced support for zipfiles.

**Example for buffers:**

Writing a grid to a buffer:

.. code-block:: python

    import sisl
    import io

    geometry = sisl.geom.graphene()
    grid = sisl.Grid((2, 2, 2), geometry=geometry)
    grid[:] = np.random.random(grid.shape)

    buffer = io.BytesIO()

    nc = sisl.io.gridncSileSiesta(buffer, mode="wb")
    nc.write_grid(grid)

Reading a grid from a buffer:

.. code-block:: python

    import sisl
    import io

    buffer = ... # Get a buffer with the grid data

    grid = sisl.io.gridncSileSiesta(buffer).read_grid()

**Example for zip files:**

Reading the Hamiltonian from a SIESTA run inside a zip file:

.. code-block:: python

    import sisl

    sisl.get_sile("/path/to/data.zip/run/RUN.fdf").read_hamiltonian()

Writing a Hamiltonian inside a zip file:

..  code-block:: python

    import sisl

    geom = sisl.geom.graphene()
    H = sisl.Hamiltonian(geom)

    H.write_hamiltonian("/path/to/data.zip/graphene.HSX")

By passing the path inside the zip file as a string, ``sisl`` will
automatically create the ``zipfile.ZipFile`` object and close it
when it is done. If you don't want the zip file to be closed, you can
create it externally and then pass a ``zipfile.Path`` to ``sisl``:

.. code-block:: python

    import sisl
    import zipfile

    # Create a zip file or append to an existing one
    zip_file = zipfile.ZipFile("myzipfile.zip", "a")
    # Define path inside the zip file
    H_path = zipfile.Path(zip_file, "graphene.HSX")

    geom = sisl.geom.graphene()
    H = sisl.Hamiltonian(geom)

    H.write_hamiltonian(H_path)

    # Now the zip file is not closed, it is up to you to close it
    # when you are done
    zip_file.close()
